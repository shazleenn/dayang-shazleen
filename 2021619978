#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>
#include <string.h>

#define MAX_CHILDREN 10

int num_children = 0;
int children[MAX_CHILDREN];

void sigint_handler(int sig) {
    printf("Interrupt detected. Exiting.\n");
    for (int i = 0; i < num_children; i++) {
        kill(children[i], SIGTERM);
    }
    exit(0);
}

int main() {
    int parent_to_child[MAX_CHILDREN][2];
    for (int i = 0; i < MAX_CHILDREN; i++) {
        if (pipe(parent_to_child[i]) == -1) {
            perror("pipe");
            exit(1);
        }
    }

    signal(SIGINT, sigint_handler);

    printf("Enter a message to send to the child processes:\n");
    char message[256];
    fgets(message, 256, stdin);

    for (int i = 0; i < 3; i++) {
        int pid = fork();
        if (pid == -1) {
            perror("fork");
            exit(1);

        } else if (pid == 0) {
            close(parent_to_child[i][1]);
            char buf[256];
            read(parent_to_child[i][0], buf, 256);
            printf("Child %d received message: %s", i, buf);
            close(parent_to_child[i][0]);
            exit(0);

        } else {
            children[i] = pid;
            close(parent_to_child[i][0]);
            write(parent_to_child[i][1], message, strlen(message)+1);
            close(parent_to_child[i][1]);
            num_children++;
        }
    }

    while (1) {
    }

    return 0;
}
